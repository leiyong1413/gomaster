package basic

import "fmt"

// 包
// 包用于组织 Go 源代码，提供了更好的可重用性与可读性
// 包提供了代码的封装

// package packageName 这行代码指定了某一源文件属于一个包。它应该放在每一个源文件的第一行
// 属于某一个包的源文件都应该放置于一个单独命名的文件夹里。按照 Go 的惯例，应该用包名命名该文件夹

// 导入自定义包
// 为了使用自定义包，我们必须要先导入它。导入自定义包的语法为 import path。我们必须指定自定义包相对于工作区内 src 文件夹的相对路径

// 导出名字
// 在 Go 中，任何以大写字母开头的变量或者函数都是被导出的名字。其它包只能访问被导出的函数和变量

// init 函数
// 所有包都可以包含一个或多个init 函数。init 函数不应该有任何返回值类型和参数
// init 函数可用于执行初始化任务

// 包的初始化顺序
// 1.首先初始化包级别（Package Level）的变量
// 2.紧接着调用 init 函数。包可以有多个 init 函数（在一个文件或分布于多个文件中），它们按照编译器解析它们的顺序进行调用
// 3.如果一个包导入了另一个包，会先初始化被导入的包。尽管一个包可能会被导入多次，但是它只会被初始化一次

// 导入包中，使用使用空白标识符
// 导入了包，却不在代码中使用它，这在 Go 中是非法的。当这么做时，编译器是会报错的。
// 有时候我们导入一个包，只是为了确保它进行了初始化，而无需使用包中的任何函数或变量, 这时候可以使用空白标识符
// import(
// _ "fmt"
// )

func UseCase06Package() {
	fmt.Println("UseCase06Package Start")

	fmt.Println("UseCase06Package End")
	fmt.Println()
}
